{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","userAddress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVAAe,I,6CCSPA,EAA2BC,IAA3BD,cAGFE,GAH6BD,IAAZE,QAGXC,OAAOC,OAAOC,EAAGC,SAASC,YAChCC,EAAS,IAAIC,WAAWR,GACxBS,EAAcV,IAAKE,QAAQS,cAAcH,GAGzCI,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAGvCC,EAAUC,wBAAc,UAGxBC,EACiB,YAoNRC,EAjNH,WAEV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAIVC,SAAXC,EAJqB,EAIrBA,QAEGC,UANkB,wBAO3BC,QAAQC,IAAI,yBAPe,SAUJH,EAAOI,QAAQ,CAAEC,eAAe,IAV5B,OAUrBC,EAVqB,OAW3BJ,QAAQC,IACN,6BACAG,EAASC,UAAUC,YAErBhB,EAAiBc,EAASC,UAAUC,YAfT,wBAiB3BC,MAAM,8DAjBqB,0DAoB7BP,QAAQQ,MAAR,MApB6B,0DAAH,qDAyBxBC,EAAa,uCAAG,gCAAAb,EAAA,2DACDC,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOI,UAJZ,OAIZE,EAJY,OAKlBJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7DhB,EAAiBc,EAASC,UAAUC,YANlB,2CAAH,qDAWbI,EAAO,uCAAG,8BAAAd,EAAA,yDACY,IAAtBL,EAAWoB,OADD,uBAEZX,QAAQC,IAAI,sBAFA,iCAKdT,EAAc,IACdQ,QAAQC,IAAI,YAAaV,GANX,SAQNqB,EAAWC,IACXC,EAAU,IAAIC,IAAQlC,EAAKF,EAAWiC,GAThC,UAWNE,EAAQE,IAAIC,OAAO1B,EAAY,CACnC2B,SAAU,CACRzC,YAAaA,EAAY4B,UACzBc,KAAMP,EAASQ,OAAOf,aAdd,eAiBZL,QAAQC,IAAI,mCAAoCV,GAjBpC,UAmBN8B,IAnBM,0DAqBZrB,QAAQC,IAAI,qBAAZ,MArBY,0DAAH,qDA0BPqB,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACRhC,EAAcgC,IAIVX,EAAc,WAClB,IAAMa,EAAa,IAAIC,aAAW3C,EAASE,GAI3C,OAHiB,IAAI0C,IACnBF,EAAY7B,OAAOC,OAAQZ,IAKzB2C,EAAgB,uCAAG,8BAAAjC,EAAA,sEAEfgB,EAAWC,IACXC,EAAU,IAAIC,IAAQlC,EAAKF,EAAWiC,GAC5CZ,QAAQC,IAAI,QAJS,SAKfa,EAAQE,IAAIc,cAAc,CAC9BZ,SAAU,CACRzC,YAAaA,EAAY4B,UACzBc,KAAMP,EAASQ,OAAOf,UACtB0B,cAAejE,EAAckE,WAE/BC,QAAS,CAACxD,KAXS,cAarBuB,QAAQC,IAAI,wCAAyCxB,EAAY4B,UAAUC,YAbtD,SAcfe,IAde,yDAiBrBrB,QAAQC,IAAI,sCAAZ,MAjBqB,0DAAH,qDAqBhBoB,EAAU,uCAAG,gCAAAzB,EAAA,sEAETgB,EAAWC,IACXC,EAAU,IAAIC,IAAQlC,EAAKF,EAAWiC,GAH7B,SAIOE,EAAQoB,QAAQzD,YAAY0D,MAAM1D,EAAY4B,WAJrD,OAIT6B,EAJS,OAMflC,QAAQC,IAAI,kBAAmBiC,GAC/BxC,EAAWwC,EAAQzC,SAPJ,kDAUfO,QAAQC,IAAI,wBAAZ,MACAP,EAAW,MAXI,0DAAH,qDAyFhB,OAhBA0C,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAzC,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOyC,iBAAiB,OAAQD,GACzB,kBAAMxC,OAAO0C,oBAAoB,OAAQF,MAC/C,IAGHD,qBAAU,WACJ/C,IACFW,QAAQC,IAAI,wBACZoB,OAED,CAAChC,IAGF,qBAAKmD,UAAU,MAAf,SACE,qBAAKA,UAAWnD,EAAgB,mBAAqB,YAArD,SACE,sBAAKmD,UAAU,mBAAf,UACE,oBAAGA,UAAU,SAAb,UAAsB,sBAAMA,UAAU,QAAhB,gCAAtB,gCACA,mBAAGA,UAAU,WAAb,8EAGEnD,GAhFR,wBACEmD,UAAU,mCACVC,QAAShC,EAFX,+BAiFOpB,IAtEW,OAAZI,EAEA,qBAAK+C,UAAU,sBAAf,SACE,wBAAQA,UAAU,+BAA+BC,QAASZ,EAA1D,kEASF,sBAAKW,UAAU,sBAAf,UACE,uBACEE,SAAU,SAACnB,GACTA,EAAMoB,iBACNjC,KAHJ,UAME,uBACEkC,KAAK,OACLC,YAAY,kBACZrB,MAAOjC,EACPuD,SAAUxB,IAEZ,wBAAQsB,KAAK,SAASJ,UAAU,+BAAhC,uBAIF,qBAAKA,UAAU,WAAf,SAEG/C,EAAQsD,KAAI,SAACC,EAAMC,GAAP,OACX,sBAAKT,UAAU,WAAf,UACE,qBAAKU,IAAKF,EAAKG,QAASC,IAAI,QAC5B,oBAAGZ,UAAU,WAAb,2BACiBQ,EAAKK,YAAY/C,gBAHL2C,oBC1L/CK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.a2372c9f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React, {useEffect, useState} from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\nimport idl from './idl.json';\r\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport kp from './keypair.json'\r\n\r\n// SystemProgram is a reference to the Solana runtime!\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\n// A keypair for the account that will hold the GIF data.\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secret = new Uint8Array(arr)\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\r\n\r\n// Get our program's id from the IDL file.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n// Controls how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  // Check if Phantom wallet is connected or not\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      // First make sure we have access to window.solana\r\n      // MetaMask automatically injects an special object named solana\r\n      const { solana } = window;\r\n\r\n      if (solana.isPhantom) {\r\n        console.log('Phantom wallet found!');\r\n\r\n        // Connect the users wallet if we're authorized to acess user's wallet\r\n        const response = await solana.connect({ onlyIfTrusted: true });\r\n        console.log(\r\n          'Connected with Public Key:',\r\n          response.publicKey.toString()\r\n        );\r\n        setWalletAddress(response.publicKey.toString());\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet 👻');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  // Connect to wallet\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log('Connected with Public Key:', response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  // Send Gif to Solana Program\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log(\"No gif link given!\")\r\n      return\r\n    }\r\n    setInputValue('');\r\n    console.log('Gif link:', inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n  \r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF successfully sent to program\", inputValue)\r\n  \r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error)\r\n    }\r\n  };\r\n\r\n  // Fires off as user type in input box\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  // Create provider, an authenticated connection to solana\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    );\r\n    return provider;\r\n  };\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\r\n      await getGifList();\r\n  \r\n    } catch(error) {\r\n      console.log(\"Error creating BaseAccount account:\", error)\r\n    }\r\n  };\r\n\r\n  const getGifList = async() => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n      \r\n      console.log(\"Got the account\", account)\r\n      setGifList(account.gifList)\r\n  \r\n    } catch (error) {\r\n      console.log(\"Error in getGifList: \", error)\r\n      setGifList(null);\r\n    }\r\n  };\r\n\r\n  // Render button if user hasn't connect wallet\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  // Render gif collection if wallet is connected\r\n  const renderConnectedContainer = () => {\r\n    // If we hit this, it means the program account hasn't been initialized.\r\n      if (gifList === null) {\r\n        return (\r\n          <div className=\"connected-container\">\r\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\r\n              Do One-Time Initialization For GIF Program Account\r\n            </button>\r\n          </div>\r\n        )\r\n      } \r\n      // Otherwise, we're good! Account exists. User can submit GIFs.\r\n      else {\r\n        return(\r\n          <div className=\"connected-container\">\r\n            <form\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n                sendGif();\r\n              }}\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter gif link!\"\r\n                value={inputValue}\r\n                onChange={onInputChange}\r\n              />\r\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n                Submit\r\n              </button>\r\n            </form>\r\n            <div className=\"gif-grid\">\r\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\r\n              {gifList.map((item, index) => (\r\n                <div className=\"gif-item\" key={index}>\r\n                  <img src={item.gifLink} alt='GIF'/>\r\n                  <p className='add-text'>\r\n                    Submitted by: {item.userAddress.toString()}\r\n                  </p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  // Fetch GIFs from Solana program\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching GIF list...');\r\n      getGifList()\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={walletAddress ? 'authed-container' : 'container'}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\"><span className=\"emoji\">🖼️</span> Rick and Morty GIF Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your Rick and Morty GIF collection in the metaverse ✨\r\n          </p>\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}